name: Build & Release Zin

on:
  push:
    tags:
      - 'v*' # Trigger this workflow on every push that is a tag starting with 'v'

permissions:
  contents: write

jobs:
  build_for_release:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            platform_name: linux
            asset_ext: tar.gz
            pack_cmd: tar -czvf
            ocaml_version: '5.3.0' # Specify a stable OCaml version
          - os: macos-latest
            platform_name: macos
            asset_ext: tar.gz
            pack_cmd: tar -czvf
            ocaml_version: '5.3.0'
          - os: windows-latest
            platform_name: windows
            asset_ext: zip
            pack_cmd: zip -r # zip needs -r for directories, and output name first
            ocaml_version: '5.3.0'
      fail-fast: false # Allows other platforms to build even if one fails

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code üöÄ
        uses: actions/checkout@v4

      - name: Set up OCaml environment ‚òï
        uses: ocaml/setup-ocaml@v3
        with:
          ocaml-compiler: ${{ matrix.ocaml_version }}

      - name: Install OCaml dependencies with Opam (Linux/macOS) üì¶
        if: runner.os != 'Windows'
        run: |
          opam update
          opam install --with-test --no-depexts . # Install dependencies from your opam file (if you have one)
          opam install cmdliner ppx_deriving ounit2  # Ensure these are installed if not in your opam file
          opam list # See installed packages
        shell: bash # Explicitly use bash for Linux and macOS

      - name: Install OCaml dependencies with Opam (Windows) üì¶
        if: runner.os == 'Windows'
        run: |
          opam update
          opam install --with-test --no-depexts .
          opam install cmdliner ppx_deriving ounit2
          opam list
        shell: pwsh # Explicitly use PowerShell for Windows

      - name: Extract Version from Tag üè∑Ô∏è
        id: get_version
        run: echo "VERSION=${GITHUB_REF_NAME#v}" >> $GITHUB_ENV
        shell: bash

      - name: Determine Architecture üíª
        id: get_arch
        run: |
          # Maps GitHub Actions runner arch to common names
          case "${{ runner.arch }}" in
            X64) echo "ARCH=x86_64" >> $GITHUB_ENV ;;
            ARM64) echo "ARCH=aarch64" >> $GITHUB_ENV ;; # For macOS Apple Silicon runners
            *) echo "ARCH=unknown" >> $GITHUB_ENV ;;
          esac
        shell: bash # This step uses bash regardless of OS

      - name: Build Zin Binary with Dune (Linux/macOS) üí™
        if: runner.os != 'Windows'
        run: opam exec -- dune build --release bin/main.exe
        shell: bash

      - name: Build Zin Binary with Dune (Windows) üí™
        if: runner.os == 'Windows'
        run: opam exec -- dune build --release bin/main.exe
        shell: pwsh

      - name: Prepare Release Directory (Linux/macOS) üìÅ
        if: runner.os != 'Windows'
        run: |
          mkdir zin-release
          # Assuming dune builds bin/main.exe to _build/default/bin/main.exe
          # And you want it named 'zin' in the release
          cp ./\_build/default/bin/main.exe ./zin-release/zin
        shell: bash

      - name: Prepare Release Directory (Windows) üìÅ
        if: runner.os == 'Windows'
        run: |
          mkdir zin-release
          # On Windows, the executable might be .exe
          Copy-Item -Path .\_build\default\bin\main.exe -Destination .\zin-release\zin.exe
        shell: pwsh

      - name: Create Release Archive (Linux/macOS) üéÅ
        if: runner.os != 'Windows'
        run: |
          ASSET_NAME="zin-${{ env.VERSION }}-${{ matrix.platform_name }}-${{ env.ARCH }}.${{ matrix.asset_ext }}"
          echo "ASSET_NAME=${ASSET_NAME}" >> $GITHUB_ENV
          ${{ matrix.pack_cmd }} "${ASSET_NAME}" zin-release/
        shell: bash

      - name: Create Release Archive (Windows) üéÅ
        if: runner.os == 'Windows'
        run: |
          # PowerShell syntax for local variable assignment
          $ASSET_NAME = "zin-${{ env.VERSION }}-${{ matrix.platform_name }}-${{ env.ARCH }}.${{ matrix.asset_ext }}"
          
          # Write the variable to GITHUB_ENV in PowerShell
          "ASSET_NAME=$ASSET_NAME" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          
          # Execute the zip command
          # Note: 'zip' command on Windows might require a full path or ensuring it's in PATH
          # If 'zip' isn't found, you might need to install a tool like 7-Zip and use its executable.
          ${{ matrix.pack_cmd }} "$ASSET_NAME" zin-release/
          
        shell: pwsh

      - name: Upload Release Asset to GitHub üöÄ
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/') # Only upload if triggered by a tag push
        with:
          files: ${{ env.ASSET_NAME }} # Upload the created archive as a release asset
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # GitHub's default token for actions
